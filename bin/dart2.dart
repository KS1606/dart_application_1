import 'dart:io';
import 'dart:math';

const int gridSize = 10;

const shipSpecifications = {
  4: 1, 
  3: 2,
  2: 3,
  1: 4, 
};

void main() {
  List<List<String>> playerGrid = List.generate(gridSize, (_) => List.filled(gridSize, 'üî≥'));
  List<List<String>> computerGrid = List.generate(gridSize, (_) => List.filled(gridSize, 'üî≥')); 
  List<List<String>> computerShips = List.generate(gridSize, (_) => List.filled(gridSize, 'üî≥'));

  // –°—á—ë—Ç—á–∏–∫–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–π, –ø—Ä–æ–º–∞—Ö–æ–≤ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ—Ä–∞–±–ª–µ–π
  int playerHits = 0;
  int playerMisses = 0;
  int computerHits = 0;
  int computerMisses = 0;

  placeShipsAutomatically(computerShips);

  print("–ú–æ—Ä—Å–∫–æ–π –±–æ–π!");
  print("–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏ —Å–∞–º–∏? –í–≤–µ–¥–∏—Ç–µ '1' –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ '2' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π:");
  String? choice = stdin.readLineSync();
  if (choice == '1') {
    placeShipsManually(playerGrid);
  } else {
    print("–ö–æ—Ä–∞–±–ª–∏ –±—É–¥—É—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
    placeShipsAutomatically(playerGrid);
  }

  while (true) {
    printGrid(playerGrid, "–í–∞—à–µ –ø–æ–ª–µ:");
    printGrid(computerGrid, "–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤–∞—à–∏ –≤—ã—Å—Ç—Ä–µ–ª—ã):");
    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 1):");
    List<int> coordinates = getCoordinates();

    if (shoot(computerShips, computerGrid, coordinates)) {
      playerHits++;
      print("–ü–æ–ø–∞–¥–∞–Ω–∏–µ!");
    } else {
      playerMisses++;
      print("–ú–∏–º–æ!");
    }

    if (checkWin(computerShips)) {
      print("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!");
      saveStatistics("–ò–≥—Ä–æ–∫", playerGrid, playerHits, playerMisses, computerHits, computerMisses);
      break;
    }

    print("–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...");
    List<int> computerShot = generateRandomCoordinates();
    if (shoot(playerGrid, playerGrid, computerShot)) {
      computerHits++;
      print("–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª –≤ –≤–∞—à—É —Ü–µ–ª—å!");
    } else {
      computerMisses++;
      print("–ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!");
    }

    if (checkWin(playerGrid)) {
      print("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª.");
      saveStatistics("–ö–æ–º–ø—å—é—Ç–µ—Ä", computerGrid, computerHits, computerMisses, playerHits, playerMisses);
      break;
    }
  }
}

void saveStatistics(String winner, List<List<String>> grid, int hits, int misses, int opponentHits, int opponentMisses) {
  int remainingShips = countRemainingShips(grid);

  // –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Directory('statistics').createSync();
  File file = File('statistics/game_statistics.txt');

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  String stats = '''
  –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: $winner
  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π: $hits
  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–∞—Ö–æ–≤: $misses
  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∞–±–ª–µ–π, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–∞ –ø–æ–ª–µ: $remainingShips
  –ü–æ–ø–∞–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: $opponentHits
  –ü—Ä–æ–º–∞—Ö–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: $opponentMisses
  ''';

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
  file.writeAsStringSync(stats);

  print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª 'statistics/game_statistics.txt'.");
}

int countRemainingShips(List<List<String>> grid) {
  int count = 0;
  for (int i = 0; i < gridSize; i++) {
    for (int j = 0; j < gridSize; j++) {
      if (grid[i][j] == 'üö¢') {
        count++;
      }
    }
  }
  return count;
}

void placeShipsAutomatically(List<List<String>> grid) {
  Random random = Random();
  for (var shipLength in shipSpecifications.keys) {
    for (int i = 0; i < shipSpecifications[shipLength]!; i++) {
      while (true) {
        bool horizontal = random.nextBool();
        int row = random.nextInt(gridSize);
        int col = random.nextInt(gridSize);

        if (canPlaceShip(grid, row, col, shipLength, horizontal)) {
          placeShip(grid, row, col, shipLength, horizontal);
          break;
        }
      }
    }
  }
}

void placeShipsManually(List<List<String>> grid) {
  for (var shipLength in shipSpecifications.keys) {
    for (int i = 0; i < shipSpecifications[shipLength]!; i++) {
      printGrid(grid, "–í–∞—à–µ –ø–æ–ª–µ:");
      print("–†–∞–∑–º–µ—â–∞–π—Ç–µ –∫–æ—Ä–∞–±–ª—å –¥–ª–∏–Ω–æ–π $shipLength (–Ω–æ–º–µ—Ä ${i + 1} –∏–∑ ${shipSpecifications[shipLength]}).");
      while (true) {
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 1):");
        List<int> startCoordinates = getCoordinates();
        print("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é: 'h' –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ 'v' –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ:");
        String? orientation = stdin.readLineSync();
        bool horizontal = (orientation == 'h');

        if (canPlaceShip(grid, startCoordinates[0], startCoordinates[1], shipLength, horizontal)) {
          placeShip(grid, startCoordinates[0], startCoordinates[1], shipLength, horizontal);
          break;
        } else {
          print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é.");
        }
      }
    }
  }
}

bool canPlaceShip(List<List<String>> grid, int row, int col, int length, bool horizontal) {
  for (int i = 0; i < length; i++) {
    int r = row + (horizontal ? 0 : i);
    int c = col + (horizontal ? i : 0);

    if (r >= gridSize || c >= gridSize || grid[r][c] != 'üî≥') {
      return false;
    }

    if (!isAreaClear(grid, r, c)) {
      return false;
    }
  }
  return true;
}

bool isAreaClear(List<List<String>> grid, int row, int col) {
  for (int i = -1; i <= 1; i++) {
    for (int j = -1; j <= 1; j++) {
      int r = row + i;
      int c = col + j;

      if (r >= 0 && r < gridSize && c >= 0 && c < gridSize && grid[r][c] == 'üö¢') {
        return false;
      }
    }
  }
  return true;
}

void placeShip(List<List<String>> grid, int row, int col, int length, bool horizontal) {
  for (int i = 0; i < length; i++) {
    int r = row + (horizontal ? 0 : i);
    int c = col + (horizontal ? i : 0);
    grid[r][c] = 'üö¢';
  }
}

void printGrid(List<List<String>> grid, String title) {
  print(title);

  stdout.write("     "); 
  for (int col = 1; col <= gridSize; col++) {
    stdout.write("${col.toString().padLeft(2)} "); 
  }
  print("");

  for (int row = 0; row < gridSize; row++) {
    stdout.write("${(row + 1).toString().padLeft(2)} | ");
    for (int col = 0; col < gridSize; col++) {
      stdout.write("${grid[row][col].padLeft(2)} ");
    }
    print("");
  }

  stdout.write("     "); 
  for (int col = 1; col <= gridSize; col++) {
    stdout.write("${col.toString().padLeft(2)} "); 
  }
  print("");
}

List<int> getCoordinates() {
  while (true) {
    try {
      String? input = stdin.readLineSync();
      if (input == null || input.isEmpty) {
        throw FormatException("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥.");
      }
      List<int> coords = input.split(' ').map(int.parse).toList();
      if (coords.length != 2 || coords[0] < 1 || coords[0] > gridSize || coords[1] < 1 || coords[1] > gridSize) {
        throw FormatException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.");
      }
      return [coords[0] - 1, coords[1] - 1];
    } catch (e) {
      print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ $gridSize, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º.");
    }
  }
}

bool shoot(List<List<String>> targetGrid, List<List<String>> displayGrid, List<int> coordinates) {
  int row = coordinates[0];
  int col = coordinates[1];

  if (targetGrid[row][col] == 'üö¢') {
    targetGrid[row][col] = 'üìç';
    displayGrid[row][col] = 'üìç';
    return true;
  } else if (targetGrid[row][col] == 'üî≥') {
    targetGrid[row][col] = 'üåä';
    displayGrid[row][col] = 'üåä';
    return false;
  }
  return false; 
}

bool checkWin(List<List<String>> grid) {
  for (int i = 0; i < gridSize; i++) {
    for (int j = 0; j < gridSize; j++) {
      if (grid[i][j] == 'üö¢') {
        return false;
      }
    }
  }
  return true;
}

List<int> generateRandomCoordinates() {
  Random random = Random();
  return [random.nextInt(gridSize), random.nextInt(gridSize)];
}
